[gcode_macro START_PRINT]
gcode:
    M106 S0
    M220 S100
    M221 S100
    {% set BED_TEMP = params.BED_TEMP|default(90)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    PARK
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    #BED_MESH_CALIBRATE
    INTRO_LINE
    WIPE_NOZZLE
    # reset extruder
    G92 E0

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    # relative positioning
    G91
    G1 X-20 Y-20 Z5 E-3 F500
    # Raise nozzle by 10mm
    G1 Z10 F5000
    G1 X0 Y10 F7200
    G1 Z0.15
    # Use absolute coordinates
    G90
    # disable steppers
    #M84
    # reset Extruder
    G92 E0
    M300 S300 P3000

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  PAUSE_PARK

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  G92 E0
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT

#[delayed_gcode delayed_homing]
#gcode:
#    G28
#    STAR_TREK
#initial_duration: 5    

[gcode_macro G28]
rename_existing: G28.1
gcode:
    {% set ns = namespace(NEED2HOME = false) %}
    {% for AXIS in ["x", "y", "z"] %}
        {% if AXIS in printer.toolhead.homed_axes %}
            RESPOND MSG="{AXIS} is already homed"            
        {% else %}
            RESPOND MSG="{AXIS} not homed"
            {% set ns.NEED2HOME = true %}         
        {% endif %}
    {% endfor %}   
    {% if ns.NEED2HOME == true %}
            G28.1
            G1 X150 Y-8
            RESPOND MSG="Z-Axis not aligned, aligning..."
            G1 Z-15 F100
            G28.1 Z        
        {% else %}
            RESPOND MSG="Z-Axis already aligned, skipping..."
            {% if params.X is not defined and params.Y is not defined and params.Z is not defined%}
                RESPOND MSG="Homing XYZ as requested..."
                G28.1
            {% endif %}
            {% if params.X is defined and params.Y is defined and params.Z is defined%}
                 RESPOND MSG="Homing XYZ as requested..."
                 G28.1 X Y Z
            {% endif %}
            {% if params.X is defined and params.Y is defined and params.Z is not defined %}
                 RESPOND MSG="Homing XY as requested..."
                 G28.1 X Y
            {% endif %}
            {% if params.X is not defined and params.Y is defined and params.Z is not defined %}
                 RESPOND MSG="Homing Y as requested..."
                 G28.1 Y
            {% endif %}
            {% if params.X is defined and params.Y is not defined and params.Z is not defined %}
                 RESPOND MSG="Homing X as requested..."
                 G28.1 X
            {% endif %}
            {% if params.X is not defined and params.Y is not defined and params.Z is defined%}
                RESPOND MSG="Homing Z as requested..."
                G28.1 Z
            {% endif %}            
        {% endif %}
    PARK

[gcode_macro Z_ALIGN]
gcode:
    G28
    G1 X150 Y-10
    G1 Z-15 F100
    G28
  
[gcode_macro G80]
gcode:
  G28
  BED_MESH_CALIBRATE
  
[gcode_macro G81]
gcode:
  BED_MESH_OUTPUT

# Dummy gcodes
[gcode_macro m201]
gcode:

[gcode_macro m203]
gcode:

[gcode_macro M204]
rename_existing:            M204.1
gcode:
    {% set F = 0.75 %}
    {% set S = params.S|default(3000)|int %} ; S sets the Accelaration Speed
    {% if 'S' in params %}
        SET_VELOCITY_LIMIT ACCEL={ S } ACCEL_TO_DECEL={ S|float * F|float }
    {% endif %}

[gcode_macro M205]
gcode:
    {% set X = params.X|default(5)|int %} ; X sets the Square Corner Velocity
    {% set Y = params.Y|default(5)|int %} ; Y sets the Square Corner Velocity
    {% if 'X' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
    {% elif 'Y' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ Y }
    {% endif %}
    

[gcode_macro M300]
gcode:  
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
    {% set F = 1 %}
    {% set L = 0 %}
    {% elif S >= 75000 %} ;max frequency set to 10kHz
    {% set F = 0 %}
    {% else %}
    {% set F = 1.5/S %} ;convert frequency to seconds 
    {% endif %}
    SET_PIN PIN=BEEPER_pin VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=BEEPER_pin VALUE=0

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

[gcode_macro M900]
gcode:
  {% if params.K is defined %}
  {% set K = params.K|float %}
  SET_PRESSURE_ADVANCE ADVANCE={K}
  {% endif %}

